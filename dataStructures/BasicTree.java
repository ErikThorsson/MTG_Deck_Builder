package dataStructures;
//Erik Orndahl 4/2/13

import java.awt.Image;
import java.lang.reflect.Array;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Enumeration;
import java.util.Hashtable;

import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.tree.DefaultMutableTreeNode;

import MTGApplication.Card;


@SuppressWarnings({ "rawtypes", "unused" })
public class BasicTree {
	//provides the location of each TreeNode
	protected HashTableMap treeNodes = new HashTableMap(100);
	protected HashTableMap attributes = new HashTableMap(10);	
	protected HashTableMap CompleteDatabase = new HashTableMap(500);
	protected HashTableMap MTG = new HashTableMap(500);
	public HashTableMap deck = new HashTableMap(20);
	protected HashTableMap spells = new HashTableMap(500);
	protected HashTableMap land = new HashTableMap(500);
	protected HashTableMap red = new HashTableMap(500);
	protected HashTableMap white = new HashTableMap(500);
	protected HashTableMap blue = new HashTableMap(500);
	protected HashTableMap black = new HashTableMap(500);
	protected HashTableMap green = new HashTableMap(500);
	protected HashTableMap multi = new HashTableMap(500);
	protected HashTableMap colorless = new HashTableMap(500);
	protected HashTableMap redNonPermanents = new HashTableMap(500);
	protected HashTableMap redPermanents = new HashTableMap(500);
	protected HashTableMap whiteNonPermanents = new HashTableMap(500);
	protected HashTableMap whitePermanents = new HashTableMap(500);	
	protected HashTableMap blueNonPermanents = new HashTableMap(500);
	protected HashTableMap bluePermanents = new HashTableMap(500);	
	protected HashTableMap blackNonPermanents = new HashTableMap(500);
	protected HashTableMap blackPermanents = new HashTableMap(500);
	protected HashTableMap greenNonPermanents = new HashTableMap(500);
	protected HashTableMap greenPermanents = new HashTableMap(500);
	protected HashTableMap multiNonPermanents = new HashTableMap(500);
	protected HashTableMap multiPermanents = new HashTableMap(500);
	protected HashTableMap colorlessPermanents = new HashTableMap(500);
	protected HashTableMap redCreatures = new HashTableMap(500);
	protected HashTableMap redPlaneswalkers = new HashTableMap(500);
	protected HashTableMap redEnchantments = new HashTableMap(500);
	protected HashTableMap redInstants = new HashTableMap(500);
	protected HashTableMap redSorcery = new HashTableMap(500);
	protected HashTableMap whiteCreatures = new HashTableMap(500);
	protected HashTableMap whitePlaneswalkers = new HashTableMap(500);
	protected HashTableMap whiteEnchantments = new HashTableMap(500);
	protected HashTableMap whiteInstants = new HashTableMap(500);
	protected HashTableMap whiteSorcery = new HashTableMap(500);
	protected HashTableMap blueCreatures = new HashTableMap(500);
	protected HashTableMap bluePlaneswalkers = new HashTableMap(500);
	protected HashTableMap blueEnchantments = new HashTableMap(500);
	protected HashTableMap blueInstants = new HashTableMap(500);
	protected HashTableMap blueSorcery = new HashTableMap(500);
	protected HashTableMap blackCreatures = new HashTableMap(500);
	protected HashTableMap blackPlaneswalkers = new HashTableMap(500);
	protected HashTableMap blackEnchantments = new HashTableMap(500);
	protected HashTableMap blackInstants = new HashTableMap(500);
	protected HashTableMap blackSorcery = new HashTableMap(500);
	protected HashTableMap greenCreatures = new HashTableMap(500);
	protected HashTableMap greenPlaneswalkers = new HashTableMap(500);
	protected HashTableMap greenEnchantments = new HashTableMap(500);
	protected HashTableMap greenInstants = new HashTableMap(500);
	protected HashTableMap greenSorcery = new HashTableMap(500);
	protected HashTableMap multiCreatures = new HashTableMap(500);
	protected HashTableMap multiPlaneswalkers = new HashTableMap(500);
	protected HashTableMap multiEnchantments = new HashTableMap(500);
	protected HashTableMap multiInstants = new HashTableMap(500);
	protected HashTableMap multiSorcery = new HashTableMap(500);
	protected HashTableMap colorlessCreatures = new HashTableMap(500);
	protected HashTableMap colorlessEquipment = new HashTableMap(500);
	protected HashTableMap colorlessArtifacts = new HashTableMap(500);

	//creates all those juicy nodes and links them like a sausage!
	@SuppressWarnings("unchecked")
	public BasicTree() throws MalformedURLException {
		TreeNode root = new TreeNode(MTG); // main tree node
		treeNodes.put("root", root);  //adds TreeNode to treeNodes hash
		TreeNode cD = new TreeNode(CompleteDatabase);
		treeNodes.put("cD", cD); 
		TreeNode deckCreaturesT = new TreeNode(deck);
		treeNodes.put("deck", deckCreaturesT); 
		TreeNode spellsT = new TreeNode(spells);
		treeNodes.put("spells", spellsT); 
		TreeNode landT = new TreeNode(land);
		treeNodes.put("land", landT); 
		TreeNode redT = new TreeNode(red);
		treeNodes.put("red", redT); 
		TreeNode whiteT = new TreeNode(white);
		treeNodes.put("white", whiteT); 
		TreeNode blueT = new TreeNode(blue);
		treeNodes.put("blue", blueT); 
		TreeNode blackT = new TreeNode(black);
		treeNodes.put("black", blackT); 
		TreeNode greenT = new TreeNode(green);		
		treeNodes.put("green", greenT); 
		TreeNode colorlessT = new TreeNode(colorless);
		treeNodes.put("colorless", colorlessT); 
		TreeNode multiT = new TreeNode(multi);
		treeNodes.put("multi", multiT); 
		TreeNode redPermanentsT = new TreeNode(redPermanents);
		treeNodes.put("redPermanents", redPermanentsT); 
		TreeNode redNonPermanentsT = new TreeNode(redNonPermanents);
		treeNodes.put("redNonPermanents", redNonPermanentsT); 
		TreeNode whitePermanentsT = new TreeNode(whitePermanents);
		treeNodes.put("whitePermanents", whitePermanentsT); 
		TreeNode whiteNonPermanentsT = new TreeNode(whiteNonPermanents);
		treeNodes.put("whiteNonPermanents", whiteNonPermanentsT); 
		TreeNode bluePermanentsT = new TreeNode(bluePermanents);
		treeNodes.put("bluePermanents", bluePermanentsT); 
		TreeNode blueNonPermanentsT = new TreeNode(blueNonPermanents);
		treeNodes.put("blueNonPermanents", blueNonPermanentsT); 
		TreeNode blackPermanentsT = new TreeNode(blackPermanents);
		treeNodes.put("blackPermanents", blackPermanentsT); 
		TreeNode blackNonPermanentsT = new TreeNode(blackNonPermanents);
		treeNodes.put("blackNonPermanents", blackNonPermanentsT); 
		TreeNode greenPermanentsT = new TreeNode(greenPermanents);
		treeNodes.put("greenPermanents", greenPermanentsT); 
		TreeNode greenNonPermanentsT = new TreeNode(greenNonPermanents);
		treeNodes.put("greenNonPermanents", greenNonPermanentsT); 
		TreeNode multiPermanentsT = new TreeNode(multiPermanents);
		treeNodes.put("multiPermanents", multiPermanentsT); 
		TreeNode multiNonPermanentsT = new TreeNode(multiNonPermanents);
		treeNodes.put("multiNonPermanents", multiNonPermanentsT); 
		TreeNode colorlessPermanentsT = new TreeNode(colorlessPermanents);
		treeNodes.put("colorlessPermanents", colorlessPermanentsT); 
		TreeNode redCreaturesT = new TreeNode(redCreatures);
		treeNodes.put("redCreatures", redCreaturesT); 
		TreeNode redPlaneswalkersT = new TreeNode(redPlaneswalkers);
		treeNodes.put("redPlaneswalkers", redPlaneswalkersT); 
		TreeNode redEnchantmentsT = new TreeNode(redEnchantments);
		treeNodes.put("redEnchantments", redEnchantmentsT); 
		TreeNode redInstantsT = new TreeNode(redInstants);
		treeNodes.put("redInstants", redInstantsT); 
		TreeNode redSorceryT = new TreeNode(redSorcery);
		treeNodes.put("redSorcery", redSorceryT); 
		TreeNode whiteCreaturesT = new TreeNode(whiteCreatures);
		treeNodes.put("whiteCreatures", whiteCreaturesT); 
		TreeNode whiteEnchantmentsT = new TreeNode(whiteEnchantments);
		TreeNode whitePlaneswalkersT = new TreeNode(whitePlaneswalkers);
		treeNodes.put("whitePlaneswalkers", whitePlaneswalkersT); 
		treeNodes.put("whiteEnchantments", whiteEnchantmentsT); 
		TreeNode whiteInstantsT = new TreeNode(whiteInstants);
		treeNodes.put("whiteInstants", whiteInstantsT); 
		TreeNode whiteSorceryT = new TreeNode(whiteSorcery);
		treeNodes.put("whiteSorcery", whiteSorceryT); 
		TreeNode blueCreaturesT = new TreeNode(blueCreatures);
		treeNodes.put("blueCreatures", blueCreaturesT); 
		TreeNode bluePlaneswalkersT = new TreeNode(bluePlaneswalkers);
		treeNodes.put("bluePlaneswalkers", bluePlaneswalkersT); 
		TreeNode blueEnchantmentsT = new TreeNode(blueEnchantments);
		treeNodes.put("blueEnchantments", blueEnchantmentsT); 
		TreeNode blueInstantsT = new TreeNode(blueInstants);
		treeNodes.put("blueInstants", blueInstantsT); 
		TreeNode blueSorceryT = new TreeNode(blueSorcery);
		treeNodes.put("blueSorcery", blueSorceryT); 
		TreeNode blackCreaturesT = new TreeNode(blackCreatures);
		treeNodes.put("blackCreatures", blackCreaturesT); 
		TreeNode blackPlaneswalkersT = new TreeNode(blackPlaneswalkers);
		treeNodes.put("blackPlaneswalkers", blackPlaneswalkersT); 
		TreeNode blackEnchantmentsT = new TreeNode(blackEnchantments);
		treeNodes.put("blackEnchantments", blackEnchantmentsT); 
		TreeNode blackInstantsT = new TreeNode(blackInstants);
		treeNodes.put("blackInstants", blackInstantsT); 
		TreeNode blackSorceryT = new TreeNode(blackSorcery);
		treeNodes.put("blackSorcery", blackSorceryT); 
		TreeNode greenCreaturesT = new TreeNode(greenCreatures);
		treeNodes.put("greenCreatures", greenCreaturesT); 
		TreeNode greenPlaneswalkersT = new TreeNode(greenPlaneswalkers);
		treeNodes.put("greenPlaneswalkers", greenPlaneswalkersT); 
		TreeNode greenEnchantmentsT = new TreeNode(greenEnchantments);
		treeNodes.put("greenEnchantments", greenEnchantmentsT); 
		TreeNode greenInstantsT = new TreeNode(greenInstants);
		treeNodes.put("greenInstants", greenInstantsT); 
		TreeNode greenSorceryT = new TreeNode(greenSorcery);
		treeNodes.put("greenSorcery", greenSorceryT); 
		TreeNode multiCreaturesT = new TreeNode(multiCreatures);
		treeNodes.put("multiCreatures", multiCreaturesT); 
		TreeNode multiPlaneswalkersT = new TreeNode(multiPlaneswalkers);
		treeNodes.put("multiPlaneswalkers", multiPlaneswalkersT); 
		TreeNode multiEnchantmentsT = new TreeNode(multiEnchantments);
		treeNodes.put("multiEnchantments", multiEnchantmentsT); 
		TreeNode multiInstantsT = new TreeNode(multiInstants);
		treeNodes.put("multiInstants", multiInstantsT); 
		TreeNode multiSorceryT = new TreeNode(multiSorcery);
		treeNodes.put("multiSorcery", multiSorceryT); 
		TreeNode colorlessCreaturesT = new TreeNode(colorlessCreatures);
		treeNodes.put("colorlessCreatures", colorlessCreaturesT); 
		TreeNode colorlessEquipmentT = new TreeNode(colorlessEquipment);
		treeNodes.put("colorlessEquipment", colorlessEquipmentT); 
		TreeNode colorlessArtifactsT = new TreeNode(colorlessArtifacts);
		treeNodes.put("colorlessArtifacts", colorlessArtifactsT); 

		//links
		root.add(landT);
		root.add(spellsT);
		spellsT.add(redT);
		spellsT.add(blueT);
		spellsT.add(whiteT);
		spellsT.add(blackT);
		spellsT.add(greenT);
		spellsT.add(multiT);
		spellsT.add(colorlessT);
		redT.add(redPermanentsT);
		redT.add(redNonPermanentsT);
		whiteT.add(whitePermanentsT);
		whiteT.add(whiteNonPermanentsT);
		blueT.add(bluePermanentsT);
		blueT.add(blueNonPermanentsT);
		greenT.add(greenPermanentsT);
		greenT.add(greenNonPermanentsT);
		blackT.add(blackPermanentsT);
		blackT.add(blackNonPermanentsT);
		multiT.add(multiPermanentsT);
		multiT.add(multiNonPermanentsT);
		redPermanentsT.add(redCreaturesT);
		redPermanentsT.add(redEnchantmentsT);
		redNonPermanentsT.add(redInstantsT);
		redNonPermanentsT.add(redSorceryT);
		whitePermanentsT.add(whiteCreaturesT);
		whitePermanentsT.add(whiteEnchantmentsT);
		whiteNonPermanentsT.add(whiteInstantsT);
		whiteNonPermanentsT.add(whiteSorceryT);
		bluePermanentsT.add(blueCreaturesT);
		bluePermanentsT.add(blueEnchantmentsT);
		blueNonPermanentsT.add(blueInstantsT);
		blueNonPermanentsT.add(blueSorceryT);
		blackPermanentsT.add(blackCreaturesT);
		blackPermanentsT.add(blackEnchantmentsT);
		blackNonPermanentsT.add(blackInstantsT);
		blackNonPermanentsT.add(blackSorceryT);
		greenPermanentsT.add(greenCreaturesT);
		greenPermanentsT.add(greenEnchantmentsT);
		greenNonPermanentsT.add(greenInstantsT);
		greenNonPermanentsT.add(greenSorceryT);
		multiPermanentsT.add(multiCreaturesT);
		multiPermanentsT.add(multiEnchantmentsT);
		multiNonPermanentsT.add(multiInstantsT);
		multiNonPermanentsT.add(multiSorceryT);
		colorlessPermanentsT.add(colorlessCreaturesT);
		colorlessPermanentsT.add(colorlessEquipmentT);
		colorlessPermanentsT.add(colorlessArtifactsT);
	}
}
